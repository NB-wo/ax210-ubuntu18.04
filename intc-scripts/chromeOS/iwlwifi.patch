diff --git a/drivers/net/wireless/intel/iwlwifi/mvm/rxmq.c b/drivers/net/wireless/intel/iwlwifi/mvm/rxmq.c
index 3e8d7b25d388..39f9535969da 100644
--- a/drivers/net/wireless/intel/iwlwifi/mvm/rxmq.c
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/rxmq.c
@@ -1610,8 +1610,10 @@ static inline u8 iwl_mvm_nl80211_band_from_rx_msdu(u8 phy_band)
 		return NL80211_BAND_2GHZ;
 	case PHY_BAND_5:
 		return NL80211_BAND_5GHZ;
+#if CFG80211_VERSION >= KERNEL_VERSION(5,10,0)
 	case PHY_BAND_6:
 		return NL80211_BAND_6GHZ;
+#endif
 	default:
 		WARN_ONCE(1, "Unsupported phy band (%u)\n", phy_band);
 		return NL80211_BAND_5GHZ;
diff --git a/drivers/net/wireless/intel/iwlwifi/cfg/22000.c b/drivers/net/wireless/intel/iwlwifi/cfg/22000.c
index 92f2a192aadb..40ab9d5c36d2 100644
--- a/drivers/net/wireless/intel/iwlwifi/cfg/22000.c
+++ b/drivers/net/wireless/intel/iwlwifi/cfg/22000.c
@@ -145,8 +145,12 @@ static const struct iwl_base_params iwl_ax210_base_params = {
 static const struct iwl_ht_params iwl_22000_ht_params = {
 	.stbc = true,
 	.ldpc = true,
+#if CFG80211_VERSION >= KERNEL_VERSION(5,10,0)
 	.ht40_bands = BIT(NL80211_BAND_2GHZ) | BIT(NL80211_BAND_5GHZ) |
 		      BIT(NL80211_BAND_6GHZ),
+#else
+	.ht40_bands = BIT(NL80211_BAND_2GHZ) | BIT(NL80211_BAND_5GHZ),
+#endif
 };
 
 #define IWL_DEVICE_22000_COMMON						\
diff --git a/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c b/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c
index 5bffa9d2f8..5aa158c85d 100644
--- a/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c
+++ b/drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c
@@ -334,7 +334,11 @@ static u32 iwl_get_channel_flags(u8 ch_num, int ch_idx, enum nl80211_band band,
 static int iwl_nl80211_band_from_channel_idx(int ch_idx)
 {
 	if (ch_idx >= NUM_2GHZ_CHANNELS + NUM_5GHZ_CHANNELS)
+#if CFG80211_VERSION >= KERNEL_VERSION(5,10,0)
 		return NL80211_BAND_6GHZ;
+#else
+		return -1;
+#endif
 
 	if (ch_idx >= NUM_2GHZ_CHANNELS)
 		return NL80211_BAND_5GHZ;
@@ -544,6 +544,7 @@ static void iwl_init_vht_hw_capab(struct iwl_trans *trans,
 		cpu_to_le16(IEEE80211_VHT_EXT_NSS_BW_CAPABLE);
 }
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,14,0)
 static const u8 iwl_vendor_caps[] = {
 	0xdd,			/* vendor element */
 	0x06,			/* length */
@@ -556,6 +557,7 @@ static const u8 iwl_vendor_caps[] = {
 	IWL_VENDOR_CAP_IMPROVED_BF_FDBK_HE,
 	0x00
 };
+#endif
 
 static const struct ieee80211_sband_iftype_data iwl_he_capa[] = {
 	{
@@ -805,11 +807,13 @@ iwl_nvm_fixup_sband_iftd(struct iwl_trans *trans,
 		iftype_data->he_cap.he_cap_elem.mac_cap_info[2] |=
 			IEEE80211_HE_MAC_CAP2_BCAST_TWT;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,14,0)
 	if (trans->trans_cfg->device_family == IWL_DEVICE_FAMILY_22000 &&
 	    !is_ap) {
 		iftype_data->vendor_elems.data = iwl_vendor_caps;
 		iftype_data->vendor_elems.len = ARRAY_SIZE(iwl_vendor_caps);
 	}
+#endif
 }
 
 static void iwl_init_he_hw_capab(struct iwl_trans *trans,
@@ -1047,6 +1051,7 @@ static void iwl_init_sbands(struct iwl_trans *trans,
 		iwl_init_he_hw_capab(trans, data, sband, tx_chains, rx_chains,
 				     fw);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,10,0)
 	/* 6GHz band. */
 	sband = &data->bands[NL80211_BAND_6GHZ];
 	sband->band = NL80211_BAND_6GHZ;
@@ -1061,6 +1066,7 @@ static void iwl_init_sbands(struct iwl_trans *trans,
 				     fw);
 	else
 		sband->n_channels = 0;
+#endif
 	if (n_channels != n_used)
 		IWL_ERR_DEV(dev, "NVM: used only %d of %d channels\n",
 			    n_used, n_channels);
@@ -1649,7 +1653,9 @@ iwl_parse_nvm_mcc_info(struct device *dev, const struct iwl_cfg *cfg,
 		    band == NL80211_BAND_2GHZ)
 			continue;
 
+#if LINUX_VERSION_IS_GEQ(4,19,0)
 		reg_query_regdb_wmm(regd->alpha2, center_freq, rule);
+#endif
 	}
 
 	regd->n_reg_rules = valid_rules;
diff --git a/drivers/net/wireless/intel/iwlwifi/iwl-tm-gnl.c b/drivers/net/wireless/intel/iwlwifi/iwl-tm-gnl.c
index 74f8ed5f07..bfcf1fde92 100644
--- a/drivers/net/wireless/intel/iwlwifi/iwl-tm-gnl.c
+++ b/drivers/net/wireless/intel/iwlwifi/iwl-tm-gnl.c
@@ -1030,6 +1030,9 @@ static __genl_const struct genl_ops iwl_tm_gnl_ops[] = {
 #endif
 
 	  .doit = iwl_tm_gnl_cmd_do,
+#if CFG80211_VERSION < KERNEL_VERSION(5,2,0)
+	  .policy = iwl_tm_gnl_msg_policy,
+#endif
 	  .dumpit = iwl_tm_gnl_dump,
 	  .done = iwl_tm_gnl_done,
 	},
@@ -1040,6 +1043,9 @@ static __genl_const struct genl_ops iwl_tm_gnl_ops[] = {
 #endif
 
 		.doit = iwl_tm_gnl_cmd_subscribe,
+#if CFG80211_VERSION < KERNEL_VERSION(5,2,0)
+		.policy	= iwl_tm_gnl_msg_policy,
+#endif
 	},
 };
 
@@ -1048,7 +1054,9 @@ static struct genl_family iwl_tm_gnl_family __genl_ro_after_init = {
 	.name		= IWL_TM_GNL_FAMILY_NAME,
 	.version	= IWL_TM_GNL_VERSION_NR,
 	.maxattr	= IWL_TM_GNL_MSG_ATTR_MAX,
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	.policy		= iwl_tm_gnl_msg_policy,
+#endif
 	.module		= THIS_MODULE,
 	.ops		= iwl_tm_gnl_ops,
 	.n_ops		= ARRAY_SIZE(iwl_tm_gnl_ops),
diff --git a/drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c b/drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c
index 82085271c7..618094899d 100644
--- a/drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c
@@ -36,6 +36,37 @@
 #endif
 #include "fw/api/nan.h"
 
+/* The ETSI patches were introduced in 4.17 and backported to
+ * chromeos-4.4, but we use our version in 4.4 anyway.  Also, due to
+ * backporting issues (some wmm rules code was moved to cfg80211), we
+ * only use the outer kernel version starting from 4.19.
+ */
+#if CFG80211_VERSION < KERNEL_VERSION(4,19,0)
+const static struct ieee80211_wmm_rule wmm_rules = {
+	.client = {
+		{.cw_min = 3, .cw_max = 7, .aifsn = 2, .cot = 2000},
+		{.cw_min = 7, .cw_max = 15, .aifsn = 2, .cot = 4000},
+		{.cw_min = 15, .cw_max = 1023, .aifsn = 3, .cot = 6000},
+		{.cw_min = 15, .cw_max = 1023, .aifsn = 7, .cot = 6000},
+		},
+	.ap = {
+		{.cw_min = 3, .cw_max = 7, .aifsn = 1, .cot = 2000},
+		{.cw_min = 7, .cw_max = 15, .aifsn = 1, .cot = 4000},
+		{.cw_min = 15, .cw_max = 63, .aifsn = 3, .cot = 6000},
+		{.cw_min = 15, .cw_max = 1023, .aifsn = 7, .cot = 6000},
+	}
+};
+
+const static char *wmm_cc_list[] = {
+	"AT", "BE", "BA", "BG", "HR", "CY", "CZ", "DK", "EE", "FI", "FR", "DE",
+	"GR", "HU", "IS", "IE", "IT", "LV", "LI", "LT", "LU", "MK", "MT", "ME",
+	"NL", "NO", "PL", "PT", "RO", "SK", "SI", "ES", "SE", "CH", "GB", "GF",
+	"PF", "GP", "MQ", "YT", "MC", "NC", "RE", "MF", "PM", "WF", "SM", "VA",
+	"CW", "BQ", "SX", "GL", "AD", "AI", "FK", "JE", "GI", "GG", "MS", "SH",
+	"TC", "VG",
+};
+#endif
+
 static const struct ieee80211_iface_limit iwl_mvm_limits[] = {
 	{
 		.max = CPTCFG_IWLWIFI_NUM_STA_INTERFACES,
@@ -166,6 +197,7 @@ static const struct iwl_fw_bcast_filter iwl_mvm_default_bcast_filters[] = {
 };
 #endif
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,0,0)
 static const struct cfg80211_pmsr_capabilities iwl_mvm_pmsr_capa = {
 	.max_peers = IWL_MVM_TOF_MAX_APS,
 	.report_ap_tsf = 1,
@@ -192,6 +224,7 @@ static const struct cfg80211_pmsr_capabilities iwl_mvm_pmsr_capa = {
 			     BIT(NL80211_PREAMBLE_HE),
 	},
 };
+#endif
 
 static int __iwl_mvm_mac_set_key(struct ieee80211_hw *hw,
 				 enum set_key_cmd cmd,
@@ -528,12 +561,14 @@ int iwl_mvm_mac_setup_register(struct iwl_mvm *mvm)
 		hw->wiphy->n_cipher_suites++;
 	}
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,0,0)
 	if (fw_has_capa(&mvm->fw->ucode_capa,
 			IWL_UCODE_TLV_CAPA_FTM_CALIBRATED)) {
 		wiphy_ext_feature_set(hw->wiphy,
 				      NL80211_EXT_FEATURE_ENABLE_FTM_RESPONDER);
 		hw->wiphy->pmsr_capa = &iwl_mvm_pmsr_capa;
 	}
+#endif
 
 	if (fw_has_capa(&mvm->fw->ucode_capa,
 			IWL_UCODE_TLV_CAPA_BIGTK_SUPPORT))
@@ -705,11 +705,13 @@ int iwl_mvm_mac_setup_register(struct iwl_mvm *mvm)
 			hw->wiphy->bands[NL80211_BAND_5GHZ]->vht_cap.cap |=
 				IEEE80211_VHT_CAP_SU_BEAMFORMER_CAPABLE;
 	}
+#if CFG80211_VERSION >= KERNEL_VERSION(5,10,0)
 	if (fw_has_capa(&mvm->fw->ucode_capa,
 			IWL_UCODE_TLV_CAPA_PSC_CHAN_SUPPORT) &&
 	    mvm->nvm_data->bands[NL80211_BAND_6GHZ].n_channels)
 		hw->wiphy->bands[NL80211_BAND_6GHZ] =
 			&mvm->nvm_data->bands[NL80211_BAND_6GHZ];
+#endif
 
 	hw->wiphy->hw_version = mvm->trans->hw_id;
 
@@ -674,6 +709,7 @@ int iwl_mvm_mac_setup_register(struct iwl_mvm *mvm)
 	/* we create the 802.11 header and zero length SSID IE. */
 	hw->wiphy->max_sched_scan_ie_len =
 		SCAN_OFFLOAD_PROBE_REQ_SIZE - 24 - 2;
+#if CFG80211_VERSION >= KERNEL_VERSION(4,4,0)
 	hw->wiphy->max_sched_scan_plans = IWL_MAX_SCHED_SCAN_PLANS;
 	hw->wiphy->max_sched_scan_plan_interval = U16_MAX;
 
@@ -682,6 +718,7 @@ int iwl_mvm_mac_setup_register(struct iwl_mvm *mvm)
 	 * infinite loop, so the maximum number of iterations is actually 254.
 	 */
 	hw->wiphy->max_sched_scan_plan_iterations = 254;
+#endif
 
 	hw->wiphy->features |= NL80211_FEATURE_P2P_GO_CTWIN |
 			       NL80211_FEATURE_LOW_PRIORITY_SCAN |
@@ -3513,6 +3550,66 @@ static void iwl_mvm_sta_rc_update(struct ieee80211_hw *hw,
 		iwl_mvm_sf_update(mvm, vif, false);
 }
 
+#if CFG80211_VERSION < KERNEL_VERSION(4,19,0)
+static void iwl_mvm_limit_wmm_ac(struct iwl_mvm *mvm,
+				 struct ieee80211_vif *vif,
+				 struct ieee80211_tx_queue_params *params,
+				 u16 ac)
+{
+	struct ieee80211_regdomain *rd;
+	struct ieee80211_chanctx_conf *chanctx_conf;
+	const struct ieee80211_wmm_ac *wmm_ac;
+	u16 center_freq = 0;
+	int i;
+
+	rcu_read_lock();
+	chanctx_conf = rcu_dereference(vif->chanctx_conf);
+	if (chanctx_conf)
+		center_freq = chanctx_conf->def.chan->center_freq;
+
+	rcu_read_unlock();
+
+	if (!center_freq || center_freq < 5180 || center_freq > 5720)
+		return;
+
+	if (vif->type != NL80211_IFTYPE_STATION &&
+	    vif->type != NL80211_IFTYPE_AP &&
+	    vif->type != NL80211_IFTYPE_P2P_CLIENT &&
+	    vif->type != NL80211_IFTYPE_P2P_GO)
+		return;
+
+	mutex_lock(&mvm->mutex);
+	if (iwl_mvm_is_lar_supported(mvm))
+		rd = iwl_mvm_get_current_regdomain(mvm, NULL);
+	else
+		rd = NULL;
+	mutex_unlock(&mvm->mutex);
+
+	if (IS_ERR_OR_NULL(rd))
+		return;
+
+	for  (i = 0; i < ARRAY_SIZE(wmm_cc_list); i++) {
+		if (!strncmp(wmm_cc_list[i], rd->alpha2, 2)) {
+			if (vif->type == NL80211_IFTYPE_STATION ||
+			    vif->type == NL80211_IFTYPE_P2P_CLIENT)
+				wmm_ac = &wmm_rules.client[ac];
+			else
+				wmm_ac = &wmm_rules.ap[ac];
+
+			params->txop =
+				min_t(u16, params->txop, wmm_ac->cot / 32);
+			params->cw_min =
+				max_t(u16, params->cw_min, wmm_ac->cw_min);
+			params->cw_max =
+				max_t(u16, params->cw_max, wmm_ac->cw_max);
+			params->aifs =
+				max_t(u8, params->aifs, wmm_ac->aifsn);
+			return;
+		}
+	}
+}
+#endif
+
 static int iwl_mvm_mac_conf_tx(struct ieee80211_hw *hw,
 			       struct ieee80211_vif *vif, u16 ac,
 			       const struct ieee80211_tx_queue_params *params)
@@ -3522,6 +3619,10 @@ static int iwl_mvm_mac_conf_tx(struct ieee80211_hw *hw,
 
 	mvmvif->queue_params[ac] = *params;
 
+#if CFG80211_VERSION < KERNEL_VERSION(4,19,0)
+	iwl_mvm_limit_wmm_ac(mvm, vif, &mvmvif->queue_params[ac], ac);
+#endif
+
 	/*
 	 * No need to update right away, we'll get BSS_CHANGED_QOS
 	 * The exception is P2P_DEVICE interface which needs immediate update.
@@ -5177,6 +5278,7 @@ static void iwl_mvm_set_sta_rate(u32 rate_n_flags, struct rate_info *rinfo)
 		u32_get_bits(rate_n_flags, RATE_MCS_CODE_MSK);
 
 	if (format == RATE_MCS_HE_MSK) {
+#if CFG80211_VERSION >= KERNEL_VERSION(4,19,0)
 		u32 gi_ltf = u32_get_bits(rate_n_flags,
 					  RATE_MCS_HE_GI_LTF_MSK);
 
@@ -5218,6 +5320,7 @@ static void iwl_mvm_set_sta_rate(u32 rate_n_flags, struct rate_info *rinfo)
 		if (rate_n_flags & RATE_HE_DUAL_CARRIER_MODE_MSK)
 			rinfo->he_dcm = 1;
 		return;
+#endif
 	}
 
 	if (rate_n_flags & RATE_MCS_SGI_MSK)
diff --git a/drivers/net/wireless/intel/iwlwifi/mvm/ops.c b/drivers/net/wireless/intel/iwlwifi/mvm/ops.c
index 1dcaacc7b5..43d6dc3e6f 100644
--- a/drivers/net/wireless/intel/iwlwifi/mvm/ops.c
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/ops.c
@@ -825,13 +825,17 @@ static int iwl_mvm_start_get_nvm(struct iwl_mvm *mvm)
 get_nvm_from_fw:
 
 	rtnl_lock();
+#if CFG80211_VERSION >= KERNEL_VERSION(5,12,0)
 	wiphy_lock(mvm->hw->wiphy);
+#endif
 	mutex_lock(&mvm->mutex);
 
 	ret = iwl_trans_start_hw(mvm->trans);
 	if (ret) {
 		mutex_unlock(&mvm->mutex);
+#if CFG80211_VERSION >= KERNEL_VERSION(5,12,0)
 		wiphy_unlock(mvm->hw->wiphy);
+#endif
 		rtnl_unlock();
 		return ret;
 	}
@@ -849,7 +853,9 @@ get_nvm_from_fw:
 		iwl_mvm_stop_device(mvm);
 
 	mutex_unlock(&mvm->mutex);
+#if CFG80211_VERSION >= KERNEL_VERSION(5,12,0)
 	wiphy_unlock(mvm->hw->wiphy);
+#endif
 	rtnl_unlock();
 
 	if (ret)
diff --git a/drivers/net/wireless/intel/iwlwifi/mvm/scan.c b/drivers/net/wireless/intel/iwlwifi/mvm/scan.c
index fddc6e6e0d..c0214b5e27 100644
--- a/drivers/net/wireless/intel/iwlwifi/mvm/scan.c
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/scan.c
@@ -794,12 +794,14 @@ iwl_mvm_build_scan_probe(struct iwl_mvm *mvm, struct ieee80211_vif *vif,
 		cpu_to_le16(ies->len[NL80211_BAND_5GHZ]);
 	pos += ies->len[NL80211_BAND_5GHZ];
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,10,0)
 	memcpy(pos, ies->ies[NL80211_BAND_6GHZ],
 	       ies->len[NL80211_BAND_6GHZ]);
 	params->preq.band_data[2].offset = cpu_to_le16(pos - params->preq.buf);
 	params->preq.band_data[2].len =
 		cpu_to_le16(ies->len[NL80211_BAND_6GHZ]);
 	pos += ies->len[NL80211_BAND_6GHZ];
+#endif
 	memcpy(pos, ies->common_ies, ies->common_ie_len);
 	params->preq.common_data.offset = cpu_to_le16(pos - params->preq.buf);
 
@@ -1922,6 +1925,7 @@ static void iwl_mvm_scan_6ghz_passive_scan(struct iwl_mvm *mvm,
 					   struct iwl_mvm_scan_params *params,
 					   struct ieee80211_vif *vif)
 {
+#if CFG80211_VERSION >= KERNEL_VERSION(5,10,0)
 	struct ieee80211_supported_band *sband =
 		&mvm->nvm_data->bands[NL80211_BAND_6GHZ];
 	u32 n_disabled, i;
@@ -2008,6 +2012,7 @@ static void iwl_mvm_scan_6ghz_passive_scan(struct iwl_mvm *mvm,
 	/* all conditions to enable 6ghz passive scan are satisfied */
 	IWL_DEBUG_SCAN(mvm, "6GHz passive scan: can be enabled\n");
 	params->enable_6ghz_passive = true;
+#endif /* CFG80211_VERSION >= KERNEL_VERSION(5,10,0) */
 }
 
 static u16 iwl_mvm_scan_umac_flags_v2(struct iwl_mvm *mvm,
@@ -2338,6 +2343,7 @@ iwl_mvm_scan_umac_fill_ch_p_v6(struct iwl_mvm *mvm,
 					  channel_cfg_flags,
 					  vif->type);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,10,0)
 	if (params->enable_6ghz_passive) {
 		struct ieee80211_supported_band *sband =
 			&mvm->nvm_data->bands[NL80211_BAND_6GHZ];
@@ -2361,6 +2367,7 @@ iwl_mvm_scan_umac_fill_ch_p_v6(struct iwl_mvm *mvm,
 			cp->count++;
 		}
 	}
+#endif
 }
 
 static int iwl_mvm_scan_umac_v12(struct iwl_mvm *mvm, struct ieee80211_vif *vif,
@@ -2666,8 +2666,10 @@ int iwl_mvm_reg_scan_start(struct iwl_mvm *mvm, struct ieee80211_vif *vif,
 #endif
 	iwl_mvm_fill_scan_type(mvm, &params, vif);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,9,0)
 	if (req->duration)
 		params.iter_notif = true;
+#endif
 
 	iwl_mvm_build_scan_probe(mvm, vif, ies, &params);
 
@@ -2757,11 +2759,20 @@ int iwl_mvm_sched_scan_start(struct iwl_mvm *mvm,
 	params.pass_all =  iwl_mvm_scan_pass_all(mvm, req);
 	params.n_match_sets = req->n_match_sets;
 	params.match_sets = req->match_sets;
+#if CFG80211_VERSION >= KERNEL_VERSION(4,4,0)
 	if (!req->n_scan_plans)
 		return -EINVAL;
 
 	params.n_scan_plans = req->n_scan_plans;
 	params.scan_plans = req->scan_plans;
+#else
+	params.n_scan_plans = 1;
+	params.scan_plans = &scan_plan;
+	if (req->interval / MSEC_PER_SEC > U16_MAX)
+		scan_plan.interval = U16_MAX;
+	else
+		scan_plan.interval = req->interval / MSEC_PER_SEC;
+#endif
 
 	iwl_mvm_fill_scan_type(mvm, &params, vif);
 
diff --git a/drivers/net/wireless/intel/iwlwifi/pcie/drv.c b/drivers/net/wireless/intel/iwlwifi/pcie/drv.c
index dde8860f49..4bafe9edc5 100644
--- a/drivers/net/wireless/intel/iwlwifi/pcie/drv.c
+++ b/drivers/net/wireless/intel/iwlwifi/pcie/drv.c
@@ -4,6 +4,7 @@
  * Copyright (C) 2013-2015 Intel Mobile Communications GmbH
  * Copyright (C) 2016-2017 Intel Deutschland GmbH
  */
+#undef pr_fmt
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 
 #include <linux/module.h>
diff --git a/drivers/net/wireless/intel/iwlwifi/mvm/d3.c b/drivers/net/wireless/intel/iwlwifi/mvm/d3.c
index b04a660c5bfe..27c92f9c694f 100644
--- a/drivers/net/wireless/intel/iwlwifi/mvm/d3.c
+++ b/drivers/net/wireless/intel/iwlwifi/mvm/d3.c
@@ -2697,9 +2697,13 @@ static int iwl_mvm_d3_test_open(struct inode *inode, struct file *file)
 
 	/* start pseudo D3 */
 	rtnl_lock();
+#if CFG80211_VERSION >= KERNEL_VERSION(5,12,0)
 	wiphy_lock(mvm->hw->wiphy);
+#endif
 	err = __iwl_mvm_suspend(mvm->hw, mvm->hw->wiphy->wowlan_config, true);
+#if CFG80211_VERSION >= KERNEL_VERSION(5,12,0)
 	wiphy_unlock(mvm->hw->wiphy);
+#endif
 	rtnl_unlock();
 	if (err > 0)
 		err = -EINVAL;
@@ -2755,9 +2759,13 @@ static int iwl_mvm_d3_test_release(struct inode *inode, struct file *file)
 	iwl_fw_dbg_read_d3_debug_data(&mvm->fwrt);
 
 	rtnl_lock();
+#if CFG80211_VERSION >= KERNEL_VERSION(5,12,0)
 	wiphy_lock(mvm->hw->wiphy);
+#endif
 	__iwl_mvm_resume(mvm, true);
+#if CFG80211_VERSION >= KERNEL_VERSION(5,12,0)
 	wiphy_unlock(mvm->hw->wiphy);
+#endif
 	rtnl_unlock();
 
 	iwl_mvm_resume_tcm(mvm);
